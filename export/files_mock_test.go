// Code generated by MockGen. DO NOT EDIT.
// Source: files.go

// Package export is a generated GoMock package.
package export

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	slackdump "github.com/rusq/slackdump/v2"
	slack "github.com/slack-go/slack"
)

// MockfileProcessor is a mock of fileProcessor interface.
type MockfileProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockfileProcessorMockRecorder
}

// MockfileProcessorMockRecorder is the mock recorder for MockfileProcessor.
type MockfileProcessorMockRecorder struct {
	mock *MockfileProcessor
}

// NewMockfileProcessor creates a new mock instance.
func NewMockfileProcessor(ctrl *gomock.Controller) *MockfileProcessor {
	mock := &MockfileProcessor{ctrl: ctrl}
	mock.recorder = &MockfileProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileProcessor) EXPECT() *MockfileProcessorMockRecorder {
	return m.recorder
}

// ProcessFunc mocks base method.
func (m *MockfileProcessor) ProcessFunc(channelName string) slackdump.ProcessFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessFunc", channelName)
	ret0, _ := ret[0].(slackdump.ProcessFunc)
	return ret0
}

// ProcessFunc indicates an expected call of ProcessFunc.
func (mr *MockfileProcessorMockRecorder) ProcessFunc(channelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessFunc", reflect.TypeOf((*MockfileProcessor)(nil).ProcessFunc), channelName)
}

// MockfileExporter is a mock of fileExporter interface.
type MockfileExporter struct {
	ctrl     *gomock.Controller
	recorder *MockfileExporterMockRecorder
}

// MockfileExporterMockRecorder is the mock recorder for MockfileExporter.
type MockfileExporterMockRecorder struct {
	mock *MockfileExporter
}

// NewMockfileExporter creates a new mock instance.
func NewMockfileExporter(ctrl *gomock.Controller) *MockfileExporter {
	mock := &MockfileExporter{ctrl: ctrl}
	mock.recorder = &MockfileExporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileExporter) EXPECT() *MockfileExporterMockRecorder {
	return m.recorder
}

// ProcessFunc mocks base method.
func (m *MockfileExporter) ProcessFunc(channelName string) slackdump.ProcessFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessFunc", channelName)
	ret0, _ := ret[0].(slackdump.ProcessFunc)
	return ret0
}

// ProcessFunc indicates an expected call of ProcessFunc.
func (mr *MockfileExporterMockRecorder) ProcessFunc(channelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessFunc", reflect.TypeOf((*MockfileExporter)(nil).ProcessFunc), channelName)
}

// Start mocks base method.
func (m *MockfileExporter) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockfileExporterMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockfileExporter)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockfileExporter) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockfileExporterMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockfileExporter)(nil).Stop))
}

// MockstartStopper is a mock of startStopper interface.
type MockstartStopper struct {
	ctrl     *gomock.Controller
	recorder *MockstartStopperMockRecorder
}

// MockstartStopperMockRecorder is the mock recorder for MockstartStopper.
type MockstartStopperMockRecorder struct {
	mock *MockstartStopper
}

// NewMockstartStopper creates a new mock instance.
func NewMockstartStopper(ctrl *gomock.Controller) *MockstartStopper {
	mock := &MockstartStopper{ctrl: ctrl}
	mock.recorder = &MockstartStopperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstartStopper) EXPECT() *MockstartStopperMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockstartStopper) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockstartStopperMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockstartStopper)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockstartStopper) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockstartStopperMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockstartStopper)(nil).Stop))
}

// MockexportDownloader is a mock of exportDownloader interface.
type MockexportDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockexportDownloaderMockRecorder
}

// MockexportDownloaderMockRecorder is the mock recorder for MockexportDownloader.
type MockexportDownloaderMockRecorder struct {
	mock *MockexportDownloader
}

// NewMockexportDownloader creates a new mock instance.
func NewMockexportDownloader(ctrl *gomock.Controller) *MockexportDownloader {
	mock := &MockexportDownloader{ctrl: ctrl}
	mock.recorder = &MockexportDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexportDownloader) EXPECT() *MockexportDownloaderMockRecorder {
	return m.recorder
}

// DownloadFile mocks base method.
func (m *MockexportDownloader) DownloadFile(dir string, f slack.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", dir, f)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockexportDownloaderMockRecorder) DownloadFile(dir, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockexportDownloader)(nil).DownloadFile), dir, f)
}

// Start mocks base method.
func (m *MockexportDownloader) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockexportDownloaderMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockexportDownloader)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockexportDownloader) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockexportDownloaderMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockexportDownloader)(nil).Stop))
}
