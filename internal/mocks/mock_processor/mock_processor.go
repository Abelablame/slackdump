// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rusq/slackdump/v2/internal/chunk/processor (interfaces: Conversationer)

// Package mock_processor is a generated GoMock package.
package mock_processor

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	slack "github.com/slack-go/slack"
)

// MockConversationer is a mock of Conversationer interface.
type MockConversationer struct {
	ctrl     *gomock.Controller
	recorder *MockConversationerMockRecorder
}

// MockConversationerMockRecorder is the mock recorder for MockConversationer.
type MockConversationerMockRecorder struct {
	mock *MockConversationer
}

// NewMockConversationer creates a new mock instance.
func NewMockConversationer(ctrl *gomock.Controller) *MockConversationer {
	mock := &MockConversationer{ctrl: ctrl}
	mock.recorder = &MockConversationerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversationer) EXPECT() *MockConversationerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConversationer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConversationerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConversationer)(nil).Close))
}

// Files mocks base method.
func (m *MockConversationer) Files(arg0 context.Context, arg1 string, arg2 slack.Message, arg3 bool, arg4 []slack.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Files", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Files indicates an expected call of Files.
func (mr *MockConversationerMockRecorder) Files(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Files", reflect.TypeOf((*MockConversationer)(nil).Files), arg0, arg1, arg2, arg3, arg4)
}

// Messages mocks base method.
func (m *MockConversationer) Messages(arg0 context.Context, arg1 string, arg2 []slack.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Messages", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Messages indicates an expected call of Messages.
func (mr *MockConversationerMockRecorder) Messages(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messages", reflect.TypeOf((*MockConversationer)(nil).Messages), arg0, arg1, arg2)
}

// ThreadMessages mocks base method.
func (m *MockConversationer) ThreadMessages(arg0 context.Context, arg1 string, arg2 slack.Message, arg3 []slack.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThreadMessages", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ThreadMessages indicates an expected call of ThreadMessages.
func (mr *MockConversationerMockRecorder) ThreadMessages(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadMessages", reflect.TypeOf((*MockConversationer)(nil).ThreadMessages), arg0, arg1, arg2, arg3)
}
